Declarator := decl
Definer := def
ExternQualifier := extern
Qualifier := ExternQualifier
Name := string
Arrow := ->
NameOrConst = Name | Constant;
FunctionCall := Name([Expression[, Expression...]])
Operator := + | - | * | /
Expression := (NameOrConst | FunctionCall) [Operator [Expression]]
FunctionDeclaration := Declarator [Qualifier] Name : Type[, Type...] -> Type;
FunctionDefinition := Definer Name([NameOrConst [, NameOrConst...]]) [when BooleanExpression] -> Expression[, Expression];
